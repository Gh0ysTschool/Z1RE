let render_info, entities, link, collisions;
// initialize gamestate /////////////////////////////
function init(){
    function decompress_enemy_data(str){
        let finished_enemy_obj = {}, enemy_arr = str.trim().replace(/\s/g, "").split("/n");
        enemy_arr.forEach((enemy) => {
            let attributes = enemy.split(','), key = attributes[0];
            switch ( attributes[1] ){
                case 'o': {key += '_orange'; break;}
                case 'b': {key +=   '_blue'; break;}
                case 'm': {key += '_master'; break;}
                case 's': {key += '_slaves'; break;}
                default : {key +=        ''; break;}
            }
            finished_enemy_obj[ key ] = {
                damage : parseInt(attributes[2]) ,
                health : parseInt(attributes[3]) ,
                movement_frequency : parseInt(attributes[4]) ,
                spawn_frequency : parseInt(attributes[5]) ,
                animation_info : {
                    walking_speed : parseInt(attributes[6]) ,
                    number_of_sprites : parseInt(attributes[7]) ,
                    sprite_index : {
                        x : parseInt(attributes[8]) ,
                        y : parseInt(attributes[9]) ,
                    }
                }
            }
        });
        return finished_enemy_obj;
    };
    function init_canvas(){
        render_info.ctx = render_info.canvas.getContext("2d");
        render_info.canvas.width = 18*16;
        render_info.canvas.height = 13*16;
        document.body.appendChild( render_info.canvas );
    };
    function load_sprite_sheets(){
        render_info.sprite_sheets.overworld_tiles.src = render_info.sprite_sheet_src.overworld_tiles;
        render_info.sprite_sheets.overworld_tiles.onload = ()=>{
            render_info.sprite_sheets.link.src = render_info.sprite_sheet_src.link;
            render_info.sprite_sheets.link.onload = ()=>{
                 render_info.sprite_sheets.enemies.src = render_info.sprite_sheet_src.enemies;
                 render_info.sprite_sheets.enemies.onload = main;
            //     render_info.sprite_sheets.enemies.onload = ()=>{
            //         render_info.sprite_sheets.items.src = render_info.sprite_sheet_src.items;
            //         render_info.sprite_sheets.items.onload = ()=>{
            //             render_info.sprite_sheets.underworld_tiles.src = render_info.sprite_sheet_src.underworld_tiles;
            //             render_info.sprite_sheets.underworld_tiles.onload = main;
            //         };
            //     };
            };
        };
    };
    function init_input_listener(){
        var pressedKeys = {};

        function setKey(event, status) {
            var code = event.keyCode;
            var key;

            switch(code) {
            case 32:
                key = 'SPACE'; break;
            case 37:
                key = 'LEFT'; break;
            case 38:
                key = 'UP'; break;
            case 39:
                key = 'RIGHT'; break;
            case 40:
                key = 'DOWN'; break;
            default:
                // Convert ASCII codes to letters
                key = String.fromCharCode(code);
            }

            pressedKeys[key] = status;
        }
        document.addEventListener('keydown', function(e) {
            setKey(e, true);
            e.preventDefault();
        });

        document.addEventListener('keyup', function(e) {
            setKey(e, false);
            e.preventDefault();
        });

        document.addEventListener('blur', function() {
            pressedKeys = {};
        });

        window.input = {
            isDown: function(key) {
                return pressedKeys[key.toUpperCase()];
            }
        };
    }
    compressed_data = {
        enemy_data_string : 
            '/n'+"octorock,      o,1,1,60,2,2,8, 0, 0,"+
            '/n'+"tektite,       o,1,1,40,2,2,2, 8, 6,"+
            '/n'+"tektite,       b,1,1,40,2,2,2, 9, 6,"+
            '/n'+"peahat,        o,1,2,40,2,2,2,10,10,"+
            '/n'+"armos,         o,1,3,40,2,2,2,12, 4,"+
            '/n'+"centaur,       o,1,4,40,2,2,8, 0, 8,"+
            '/n'+"centaur,       b,1,6,40,2,2,8, 4, 8,"+
            '/n'+"ghost,         m,1,9,40,2,2,4,10, 4,"+
            '/n'+"ghost,         s,1,9,40,2,2,4,10, 4,"+
            '/n'+"leveler,       o,1,2,40,2,2,5, 8,10,"+
            '/n'+"leveler,       b,1,4,40,2,2,5, 8,11,"+
            '/n'+"moblin,        o,1,2,40,2,2,8, 0, 3,"+
            '/n'+"moblin,        b,1,2,60,2,2,8, 4, 3,"+
            '/n'+"octorock,      b,1,2,40,2,2,8, 4, 0,"+
            '/n'+"zora,          o,1,2,40,2,2,4, 4,10,"+
            '/n'+"zora,          b,1,2,40,2,2,4, 4,10,"+
            '/n'+"boulder,       n,n,n,n,n,n,n,n,n,",
    };
    link = {
        health : 3,
        invulnerabile : false,
        invulnerability_timer : 0,
        animation_info : {
            position: {
                x : 5,
                y : 8,
            },
            potential_position: {
                x : 5,
                y : 8,
            },
            temp_overworld_position: {
                x : 5,
                y : 8,
            },
            hitbox_dimensions : { w : 16, h : 16 },
            walking_speed : 5 ,
            walking_index : 0,
            direction : {
                x: 0,
                y: 0,
            },
            is_attacking : false,
            attack_animation_duration : 40, 
            current_attack_frame : 0,
            wind_up_attack_frames : 10,
            recovery_attack_frames : 10,
        },
        weapon : {
            name: 'wooden sword',
            quantity : 1,
            damage : 1,
            position :{
                x : 5,
                y : 8,
            },
            hitbox_dimensions : { w : 16, h : 4 }, // in pixels
            hitbox_offset : { x : 6, y : 0 }, // in pixels
            direction : null,
            collided : false,
        
        },
        shield : {
            name : 'wooden shield',
            quantity : 1,
        },
        item : null,
        inventory : [],
    };
    entities = {
        enemies : decompress_enemy_data(compressed_data.enemy_data_string),
        rupees : {},
        items : {},
        weapons : {},
        shields : {},
    };
    render_info = {
        canvas : document.createElement("canvas"),
        ctx : null,
        viewport : { x : 7, y : 7 },
        underworld_viewport : { x : 0 , y : 0 },
        overworld : true,
        //an array of monster names used to translate indeces in the rooms_as_enemies to the key:value pairs in the entities.enemies POJO
        index_to_enemy_name_mapping : [
            "tektite_orange",
            "tektite_blue",
            "armos_orange",
            "orange_centaur",
            "blue_centaur",
            "ghost_master",
            "ghost_slave",
            "peahat_orange",
            "leveler_orange",
            "leveler_blue",
            "moblin_orange",
            "moblin_blue",
            "octorock_orange", 
            "octorock_blue",
            "zora_orange",
            "armos_orange",
            "boulder",
        ],
        //the 255 different columns that LoZ uses in varying combinations to create each overworld screen's background sprites
        column_data : [
            [61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61],   [61, 61, 61, 61, 61, 2, 20, 20, 20, 20, 20],    [61, 61, 61, 61, 61, 2, 41, 61, 61, 61, 61],    [61, 61, 61, 62, 2, 2, 2, 42, 61, 61, 61],     [61, 61, 60, 2, 2, 2, 2, 2, 2, 41, 61],      [61, 61, 61, 61, 60, 2, 2, 2, 2, 41, 61],       [61, 61, 61, 61, 62, 2, 2, 2, 2, 41, 61],      [61, 61, 61, 61, 61, 2, 2, 2, 2, 41, 61] ,[61, 61, 61, 61, 61, 2, 2, 2, 2, 20, 20]   ,[61, 61, 2, 2, 2, 2, 2, 2, 2, 41, 61] ,[61, 62, 2, 2, 2, 2, 2, 2, 2, 41, 61]   ,[61, 60, 2, 2, 2, 2, 2, 2, 2, 41, 61] ,[61, 62, 2, 2, 2, 2, 2, 2, 2, 42, 61]   ,[61, 60, 2, 2, 2, 2, 2, 2, 2, 40, 61] ,[61, 61, 61, 60, 2, 2, 2, 40, 61, 61, 61]   ,[61, 61, 61, 61, 60, 2, 40, 61, 61, 61, 61]
            ,[61, 61, 61, 61, 62, 2, 42, 61, 61, 61, 61]    ,[61, 61, 62, 2, 2, 2, 2, 2, 42, 61, 61]    ,[61, 61, 61, 60, 2, 2, 2, 2, 2, 41, 61]    ,[61, 61, 60, 2, 2, 2, 2, 2, 40, 61, 61]    ,[61, 61, 61, 61, 61, 62, 2, 2, 42, 61, 61] ,[61, 61, 61, 61, 61, 60, 2, 2, 40, 61, 61]  ,[61, 61, 61, 62, 2, 2, 2, 2, 2, 41, 61]  ,[61, 61, 62, 2, 2, 2, 2, 2, 2, 41, 61]  ,[61, 18, 2, 2, 2, 2, 2, 2, 2, 41, 61]  ,[61, 61, 2, 2, 40, 61, 60, 2, 2, 41, 61] ,[61, 61, 2, 40, 61, 61, 61, 2, 2, 41, 61]   ,[61, 61, 2, 42, 61, 61, 61, 2, 2, 41, 61] ,[61, 61, 2, 2, 42, 61, 62, 2, 2, 41, 61]    ,[61, 61, 2, 2, 2, 1, 2, 2, 2, 41, 61]  ,[61, 61, 2, 2, 1, 2, 1, 2, 2, 41, 61]    ,[61, 61, 2, 1, 2, 1, 2, 1, 2, 41, 61]            
            ,[61, 61, 2, 80, 100, 100, 120, 2, 2, 41, 61]   ,[61, 61, 2, 81, 101, 101, 121, 2, 2, 41, 61]  ,[61, 61, 2, 81, 101, 101, 101, 141, 2, 41, 61]   ,[61, 61, 2, 81, 101, 101, 101, 101, 101, 101, 101]    ,[61, 61, 2, 81, 101, 101, 101, 140, 2, 41, 61] ,[61, 61, 2, 82, 102, 102, 122, 2, 2, 41, 61]    ,[61, 61, 2, 2, 2, 2, 2, 2, 2, 20, 20]  ,[61, 61, 2, 2, 22, 2, 22, 2, 2, 41, 61]   ,[61, 61, 2, 43, 63, 2, 2, 2, 2, 41, 61]    ,[61, 61, 2, 44, 18, 2, 2, 2, 2, 20, 20]    ,[61, 61, 2, 45, 65, 2, 2, 2, 2, 41, 61]    ,[101, 101, 101, 61, 61, 61, 61, 61, 61, 61, 61]    ,[101, 101, 101, 61, 18, 2, 2, 2, 20, 20, 20]   ,[101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101]   ,[61, 61, 2, 156, 18, 2, 2, 2, 2, 20, 20]  ,[20, 20, 2, 2, 2, 2, 2, 2, 2, 41, 61]            
            ,[61, 61, 2, 3, 23, 2, 2, 2, 2, 41, 61] ,[61, 61, 2, 5, 25, 2, 3, 23, 2, 41, 61] ,[61, 61, 2, 2, 2, 2, 5, 25, 2, 41, 61]  ,[61, 61, 2, 5, 25, 2, 2, 2, 2, 41, 61]   ,[61, 61, 2, 2, 2, 2, 3, 23, 2, 41, 61]    ,[61, 61, 2, 3, 23, 2, 5, 25, 2, 41, 61]    ,[20, 20, 20, 20, 20, 2, 2, 2, 2, 41, 61]   ,[61, 61, 61, 61, 80, 101, 101, 101, 101, 101, 101]  ,[61, 61, 61, 61, 121, 2, 2, 2, 2, 2, 2]    ,[61, 61, 61, 61, 121, 2, 2, 2, 2, 41, 61]  ,[61, 61, 61, 61, 121, 2, 2, 41, 61, 61, 61]  ,[144, 144, 144, 144, 70, 2, 2, 41, 61, 61, 61]   ,[20, 20, 2, 2, 2, 2, 2, 2, 2, 20, 20] ,[61, 61, 61, 61, 61, 2, 2, 2, 2, 2, 2]  ,[61, 61, 61, 61, 61, 2, 80, 100, 100, 100, 100]  ,[61, 61, 61, 62, 2, 2, 81, 101, 101, 101, 101]            
            ,[61, 61, 61, 60, 2, 2, 81, 101, 101, 101, 101] ,[61, 61, 61, 61, 2, 2, 81, 101, 101, 101, 101]  ,[20, 20, 20, 20, 2, 2, 81, 101, 101, 101, 101]   ,[61, 61, 2, 9, 29, 2, 2, 2, 2, 41, 61]    ,[61, 61, 2, 11, 31, 2, 2, 2, 2, 41, 61]    ,[61, 61, 2, 2, 2, 2, 9, 29, 2, 41, 61] ,[61, 61, 2, 9, 29, 2, 11, 31, 2, 41, 61]    ,[61, 61, 2, 10, 18, 2, 2, 2, 2, 41, 61] ,[61, 61, 2, 2, 2, 2, 11, 31, 2, 41, 61]    ,[61, 61, 2, 11, 31, 2, 9, 29, 2, 41, 61]   ,[73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73]  ,[73, 73, 74, 14, 14, 14, 14, 14, 14, 14, 14] ,[73, 73, 14, 33, 14, 33, 14, 33, 14, 14, 14]    ,[73, 73, 14, 14, 14, 14, 14, 14, 14, 14, 14]   ,[73, 73, 14, 14, 14, 14, 14, 14, 14, 53, 73]  ,[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]                
            ,[61, 61, 14, 14, 14, 14, 14, 14, 14, 41, 61]   ,[61, 61, 14, 14, 34, 14, 34, 14, 14, 41, 61]  ,[61, 61, 14, 55, 75, 14, 14, 14, 14, 41, 61] ,[61, 61, 14, 56, 18, 14, 14, 14, 14, 20, 20]    ,[61, 61, 14, 56, 18, 14, 14, 14, 14, 41, 61]   ,[61, 61, 14, 57, 77, 14, 14, 14, 14, 41, 61]  ,[61, 61, 2, 2, 2, 2, 2, 2, 2, 2, 2]  ,[61, 61, 2, 2, 2, 2, 80, 100, 100, 100, 100]    ,[2, 2, 2, 2, 2, 142, 101, 101, 101, 101, 101]  ,[2, 2, 2, 2, 2, 2, 81, 101, 101, 101, 101]   ,[61, 61, 2, 2, 2, 2, 81, 101, 101, 101, 101]  ,[21, 21, 2, 2, 2, 2, 81, 101, 101, 101, 101] ,[21, 21, 2, 2, 2, 2, 87, 107, 107, 101, 101]    ,[21, 21, 2, 2, 2, 2, 88, 108, 108, 102, 102]   ,[21, 21, 2, 2, 2, 2, 2, 2, 2, 2, 2]   ,[21, 21, 2, 2, 2, 2, 2, 2, 2, 21, 21]            
            ,[21, 21, 2, 27, 2, 27, 2, 27, 2, 21, 21]   ,[21, 21, 2, 2, 27, 2, 27, 2, 2, 21, 21]   ,[21, 21, 21, 2, 2, 2, 2, 2, 21, 21, 21]   ,[61, 61, 64, 64, 64, 64, 64, 64, 64, 41, 61]  ,[61, 61, 64, 64, 64, 64, 64, 64, 64, 64, 64] ,[61, 61, 2, 61, 61, 61, 61, 2, 2, 41, 61]   ,[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2] ,[100, 100, 100, 100, 120, 2, 2, 2, 2, 41, 61]   ,[101, 101, 101, 101, 121, 2, 2, 2, 2, 41, 61]  ,[101, 101, 101, 101, 121, 2, 2, 2, 2, 2, 2]  ,[101, 101, 101, 101, 101, 141, 2, 2, 2, 2, 2]    ,[101, 101, 101, 101, 101, 101, 100, 100, 100, 100, 100]    ,[73, 73, 14, 55, 75, 14, 14, 14, 14, 53, 73]   ,[73, 73, 14, 57, 77, 14, 14, 14, 14, 53, 73]  ,[73, 73, 14, 150, 18, 14, 14, 14, 14, 32, 32]    ,[14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14]            
            ,[14, 14, 14, 33, 14, 33, 14, 33, 14, 14, 14]   ,[73, 72, 14, 14, 14, 14, 14, 14, 14, 52, 73]  ,[73, 74, 14, 14, 14, 14, 14, 14, 14, 54, 73] ,[8, 8, 8, 8, 14, 14, 14, 8, 8, 8, 8]    ,[20, 20, 14, 14, 14, 14, 14, 14, 14, 41, 61]   ,[61, 61, 61, 61, 61, 61, 101, 101, 101, 101, 101] ,[61, 61, 2, 4, 18, 2, 2, 2, 2, 41, 61]  ,[101, 101, 101, 101, 101, 145, 101, 101, 101, 101, 101]  ,[102, 102, 102, 102, 102, 145, 102, 102, 102, 102, 102]    ,[21, 21, 2, 2, 21, 2, 21, 2, 2, 21, 21]    ,[21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21]   ,[61, 61, 2, 2, 27, 2, 27, 2, 2, 41, 61]   ,[61, 61, 2, 86, 106, 106, 126, 2, 2, 41, 61]  ,[61, 61, 2, 87, 107, 107, 127, 2, 2, 41, 61] ,[61, 61, 2, 87, 107, 107, 127, 2, 2, 2, 2]  ,[61, 61, 2, 88, 108, 108, 128, 2, 2, 41, 61]            
            ,[64, 64, 64, 64, 64, 64, 64, 64, 64, 41, 61]   ,[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64]  ,[67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67] ,[67, 67, 67, 68, 2, 2, 2, 48, 67, 67, 67]   ,[67, 67, 68, 2, 2, 2, 2, 2, 48, 67, 67]   ,[67, 67, 2, 2, 28, 2, 28, 2, 2, 47, 67]   ,[67, 67, 2, 2, 2, 2, 2, 2, 2, 47, 67] ,[67, 67, 2, 49, 69, 2, 2, 2, 2, 47, 67] ,[67, 67, 2, 50, 18, 2, 2, 2, 2, 26, 26]    ,[67, 67, 2, 51, 71, 2, 2, 2, 2, 47, 67]    ,[67, 68, 2, 2, 2, 2, 2, 2, 2, 47, 67]  ,[67, 66, 2, 2, 2, 2, 2, 2, 2, 47, 67]    ,[67, 67, 66, 2, 2, 2, 2, 2, 46, 67, 67]    ,[27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27]   ,[27, 27, 2, 2, 2, 2, 2, 2, 2, 2, 2]   ,[27, 27, 2, 27, 2, 27, 2, 27, 2, 27, 27]            
            ,[27, 27, 2, 2, 28, 2, 2, 2, 2, 27, 27] ,[27, 27, 2, 2, 27, 2, 27, 2, 2, 27, 27] ,[2, 2, 2, 2, 2, 2, 2, 2, 42, 61, 61]    ,[2, 2, 2, 2, 2, 2, 2, 2, 2, 41, 61]    ,[101, 101, 101, 101, 145, 2, 2, 2, 2, 2, 2]    ,[14, 14, 14, 14, 14, 14, 14, 14, 54, 73, 73]   ,[14, 14, 14, 33, 14, 33, 14, 33, 14, 53, 73]  ,[14, 14, 14, 14, 14, 14, 14, 14, 14, 53, 73]  ,[73, 73, 14, 14, 14, 14, 14, 14, 14, 32, 32]   ,[61, 61, 2, 2, 21, 2, 21, 2, 2, 41, 61]   ,[61, 61, 2, 81, 101, 101, 121, 2, 2, 2, 2]    ,[100, 100, 106, 106, 106, 106, 106, 106, 106, 100, 100]    ,[101, 101, 107, 107, 107, 107, 107, 107, 107, 101, 101]    ,[61, 61, 2, 49, 69, 2, 2, 2, 2, 41, 61]    ,[61, 61, 2, 51, 71, 2, 2, 2, 2, 41, 61]    ,[61, 61, 2, 30, 18, 2, 2, 2, 2, 20, 20]            
            ,[107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107]    ,[107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108]    ,[107, 107, 107, 107, 107, 146, 2, 2, 2, 2, 2]  ,[107, 107, 107, 107, 127, 2, 2, 2, 2, 2, 2]  ,[107, 107, 107, 107, 127, 2, 2, 27, 27, 27, 27]  ,[107, 107, 107, 107, 127, 2, 2, 2, 2, 27, 27]    ,[108, 108, 108, 108, 128, 2, 2, 2, 2, 27, 27]  ,[27, 27, 2, 2, 2, 2, 2, 2, 2, 27, 27]    ,[27, 27, 2, 2, 2, 7, 2, 2, 2, 27, 27]      ,[27, 27, 27, 27, 2, 2, 2, 27, 27, 27, 27]        ,[67, 67, 67, 66, 2, 2, 2, 46, 67, 67, 67]      ,[67, 68, 2, 2, 2, 2, 2, 2, 2, 48, 67]        ,[67, 66, 2, 2, 2, 2, 2, 2, 2, 46, 67]      ,[67, 67, 2, 2, 27, 2, 27, 2, 2, 47, 67]      ,[2, 2, 2, 2, 2, 2, 2, 2, 2, 47, 67]      ,[67, 18, 2, 2, 2, 2, 2, 2, 2, 47, 67]            
            ,[27, 27, 2, 2, 2, 27, 2, 2, 2, 27, 27] ,[67, 67, 67, 67, 66, 2, 2, 2, 2, 47, 67]    ,[26, 26, 26, 26, 26, 2, 2, 2, 2, 47, 67]   ,[67, 67, 67, 67, 67, 2, 2, 2, 2, 47, 67]  ,[67, 67, 67, 67, 68, 2, 2, 2, 2, 47, 67] ,[67, 67, 67, 67, 66, 2, 46, 67, 67, 67, 67] ,[67, 67, 67, 67, 67, 2, 47, 67, 67, 67, 67] ,[67, 67, 67, 67, 68, 2, 48, 67, 67, 67, 67]    ,[2, 2, 2, 2, 2, 2, 2, 2, 2, 27, 27]    ,[27, 27, 27, 2, 2, 2, 2, 2, 27, 27, 27]    ,[100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]    ,[73, 73, 73, 73, 73, 14, 14, 14, 14, 14, 14]   ,[32, 32, 32, 32, 32, 14, 14, 14, 14, 53, 73]  ,[21, 21, 21, 21, 2, 2, 2, 21, 21, 21, 21]    ,[21, 21, 2, 21, 21, 21, 21, 21, 2, 21, 21] ,[21, 21, 2, 21, 21, 21, 21, 21, 2, 2, 2]            
            ,[2, 2, 2, 21, 21, 21, 21, 21, 2, 21, 21]   ,[21, 21, 2, 2, 2, 27, 2, 2, 2, 21, 21]    ,[106, 106, 106, 106, 126, 2, 2, 2, 2, 2, 2]    ,[107, 107, 107, 107, 127, 2, 47, 67, 67, 67, 67]   ,[107, 107, 107, 107, 107, 147, 2, 2, 2, 2, 2] ,[107, 107, 107, 107, 151, 2, 2, 2, 2, 2, 2] ,[107, 107, 107, 107, 127, 2, 2, 2, 2, 47, 67]   ,[27, 27, 27, 27, 2, 2, 86, 106, 106, 106, 106] ,[27, 27, 27, 27, 2, 2, 87, 107, 107, 107, 107],[27, 27, 2, 2, 2, 2, 87, 107, 107, 107, 107],[27, 27, 2, 2, 2, 2, 88, 108, 108, 108, 108],[27, 27, 2, 27, 27, 27, 27, 27, 2, 27, 27],[27, 27, 2, 27, 27, 27, 27, 27, 2, 2, 2],[27, 27, 2, 27, 27, 27, 27, 27, 27, 27, 27],[2, 2, 2, 2, 2, 2, 2, 2, 2, 21, 21],[2, 2, 2, 2, 2, 2, 2, 21, 21, 21, 21]            
            ,[21, 21, 2, 21, 2, 21, 2, 21, 2, 21, 21],[21, 21, 2, 2, 2, 21, 2, 2, 2, 21, 21],[2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 67],[107, 107, 101, 101, 101, 145, 101, 101, 101, 107, 107],[67, 67, 2, 1, 2, 1, 2, 1, 2, 47, 67],[67, 67, 2, 2, 1, 2, 1, 2, 2, 47, 67],[67, 67, 2, 2, 2, 2, 2, 2, 2, 48, 67],[67, 67, 2, 2, 2, 2, 2, 2, 2, 2, 2]  ,[67, 67, 2, 7, 2, 7, 2, 7, 2, 47, 67]  ,[106, 106, 106, 106, 126, 2, 2, 2, 2, 27, 27]    ,[2, 2, 2, 2, 2, 2, 2, 27, 27, 27, 27]  ,[61, 61, 2, 2, 2, 2, 2, 2, 2, 41, 41]    ,[61, 61, 2, 3, 23, 2, 2, 2, 2, 41, 41] ,[61, 61, 2, 5, 25, 2, 3, 23, 2, 41, 41] ,[61, 61, 2, 2, 2, 2, 5, 25, 2, 41, 41]  ,[61, 18, 2, 2, 2, 2, 2, 2, 2, 41, 41]            
            ,[61, 62, 2, 2, 2, 2, 2, 2, 2, 41, 41]  ,[61, 60, 2, 2, 2, 2, 2, 2, 2, 41, 41]    ,[2, 2, 2, 2, 2, 2, 2, 2, 2, 41, 41]    ,[21, 21, 21, 21, 21, 2, 2, 2, 2, 21, 21]   ,[67, 67, 2, 2, 2, 2, 2, 2, 2, 47, 47] ,[67, 67, 2, 2, 22, 2, 22, 2, 2, 47, 47] ,[67, 67, 2, 43, 63, 2, 2, 2, 2, 47, 47] ,[67, 67, 2, 156, 18, 2, 2, 2, 2, 47, 47]    ,[67, 67, 2, 45, 65, 2, 2, 2, 2, 47, 47]    ,[67, 18, 2, 2, 2, 2, 2, 2, 2, 47, 47]  ,[67, 68, 2, 2, 2, 7, 2, 2, 2, 47, 47]    ,[2, 2, 2, 2, 2, 2, 2, 2, 2, 48, 48]    ,[67, 66, 2, 2, 2, 2, 2, 2, 2, 46, 46]  ,[67, 67, 2, 7, 2, 7, 2, 7, 2, 47, 47]    ,[67, 67, 2, 2, 7, 2, 7, 2, 2, 47, 47]  ,[67, 67, 2, 2, 2, 7, 2, 2, 2, 47, 47]            
            ,[67, 68, 2, 2, 2, 2, 2, 2, 2, 47, 47]  ,[2, 2, 2, 2, 2, 2, 2, 2, 2, 47, 47]  ,[67, 67, 67, 68, 2, 2, 2, 2, 2, 47, 47]  ,[67, 67, 68, 2, 2, 2, 2, 2, 2, 47, 47]   ,[67, 67, 67, 67, 66, 2, 2, 2, 2, 47, 47]  ,[67, 67, 67, 67, 67, 2, 2, 2, 2, 47, 47] ,[61, 60, 2, 2, 2, 2, 2, 2, 2, 40, 40]   ,[61, 61, 60, 2, 2, 2, 2, 2, 2, 41, 41] ,[61, 61, 61, 60, 2, 2, 2, 2, 2, 41, 41]    ,[61, 61, 61, 61, 60, 2, 2, 2, 2, 41, 41]   ,[61, 62, 2, 2, 2, 2, 2, 2, 2, 42, 42] ,[61, 61, 2, 2, 2, 1, 2, 2, 2, 41, 41]   ,[61, 61, 2, 2, 1, 2, 1, 2, 2, 41, 41] ,[2, 2, 2, 2, 2, 143, 101, 101, 101, 101, 101]   ,[100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101]            
            //custom columns for underworld dark rooms
            ,[61,61,24,24,24,24,24,24,24,61,61]
            ,[61,61,24,24,24,24,24,24,24,24,24]
        ],
        //the 38 different columns that LoZ uses in varying combinations to create each overworld screen's collision data
        column_collision_data : [
            [0,0,0,0,0,0,0,0,0,0,0,],
            [0,0,0,0,0,0,0,0,0,1,1,],
            [0,0,0,0,0,0,0,0,1,1,1,],
            [0,0,0,0,0,0,0,1,1,1,1,],
            [0,0,0,0,0,0,1,1,1,1,1,],
            [0,0,0,1,0,1,0,1,0,0,0,],
            [0,0,0,1,0,1,0,1,0,1,1,],
            [0,0,0,1,1,1,1,1,0,1,1,],
            [1,1,0,0,0,0,0,0,0,0,0,],
            [1,1,0,0,0,0,0,0,0,1,1,],
            [1,1,0,0,0,0,1,1,0,1,1,],
            [1,1,0,0,0,0,1,1,1,1,1,],
            [1,1,0,0,0,1,0,0,0,1,1,],
            [1,1,0,0,1,0,0,0,0,1,1,],
            [1,1,0,0,1,0,1,0,0,1,1,],
            [1,1,0,0,1,1,1,0,0,1,1,],
            [1,1,0,1,0,1,0,1,0,0,0,],
            [1,1,0,1,0,1,0,1,0,1,1,],
            [1,1,0,1,1,0,0,0,0,0,0,],
            [1,1,0,1,1,0,0,0,0,1,1,],
            [1,1,0,1,1,0,1,1,0,1,1,],
            [1,1,0,1,1,1,1,0,0,0,0,],
            [1,1,0,1,1,1,1,0,0,1,1,],
            [1,1,0,1,1,1,1,1,0,0,0,],
            [1,1,0,1,1,1,1,1,0,1,1,],
            [1,1,0,1,1,1,1,1,1,1,1,],
            [1,1,1,0,0,0,0,0,0,0,0,],
            [1,1,1,0,0,0,0,0,0,1,1,],
            [1,1,1,0,0,0,0,0,1,1,1,],
            [1,1,1,1,0,0,0,0,0,0,0,],
            [1,1,1,1,0,0,0,0,0,1,1,],
            [1,1,1,1,0,0,0,1,1,1,1,],
            [1,1,1,1,0,0,1,1,1,1,1,],
            [1,1,1,1,1,0,0,0,0,0,0,],
            [1,1,1,1,1,0,0,0,0,1,1,],
            [1,1,1,1,1,0,0,1,1,1,1,],
            [1,1,1,1,1,0,1,1,1,1,1,],
            [1,1,1,1,1,1,0,0,1,1,1,],
            [1,1,1,1,1,1,1,1,1,1,1,],
        ],
        //each room in LoZ is made up of 16 columns of 11 tiles. 
        //each 16 integers in each row of the nested arrays represent a room 
        //by containing 16 indexes to columns stored in the column_data nested array
        rooms_as_columns : [
            //overworld
            0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,3,4,5,6,5,7,8,6,9,10,11,12,13,14,15,2,2,2,1,2,2,2,2,2,16,17,4,18,5,7,7,6,10,11,19,14,15,2,2,2,2,1,0,0,0,0,0,0,20,7,7,6,5,21,20,6,22,23,9,24,9,9,19,17,19,17,25,26,27,28,9,9,25,26,27,28,9,19,15,16,15,16,3,17,19,17,12,13,19,15,16,15,16,15,2,2,2,2,2,1,2,16,3,14,15,2,2,16,15,2,2,16,15,16,3,17,19,17,12,13,19,15,16,15,16,15,2,16,17,19,17,29,30,31,9,29,9,29,9,29,19,14,0,0,17,24,32,33,34,35,36,33,33,33,37,9,38,19,0,0,3,17,39,9,39,40,41,42,39,9,39,10,11,19,0,0,0,0,0,0,1,16,17,24,9,12,13,14,3,17,9,9,9,19,14,3,17,10,11,9,9,4,18,5,8,21,0,43,43,43,43,43,44,43,43,43,43,45,45,45,45,45,45,45,0,9,9,40,42,9,40,46,42,9,40,42,9,0,45,
            0,3,17,9,31,9,30,47,29,9,9,48,49,50,9,48,51,9,52,53,51,9,9,47,29,9,30,9,31,9,19,0,0,20,7,54,7,6,22,23,9,48,49,50,48,49,50,48,51,9,9,4,18,5,7,7,7,7,54,7,6,22,23,9,9,12,13,39,9,9,39,9,9,39,38,9,9,39,4,5,7,21,20,8,7,21,20,6,12,13,19,17,9,38,19,17,19,17,12,13,19,17,9,9,5,7,6,15,16,3,17,9,10,11,4,5,54,7,55,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,59,7,7,7,7,7,7,54,7,2,2,16,17,30,9,31,9,60,30,9,30,9,29,19,15,2,16,17,9,38,9,47,9,39,9,39,9,39,9,39,9,9,9,9,38,29,19,0,20,61,61,62,63,64,65,66,65,65,65,65,65,65,65,66,65,2,2,23,9,9,9,9,9,9,9,9,67,68,69,70,71,68,69,72,67,73,72,9,0,45,
            74,74,75,76,77,77,76,77,77,76,77,77,76,77,78,78,78,78,77,76,77,77,76,77,77,76,77,77,76,77,79,79,0,0,80,81,81,81,82,83,84,85,81,81,81,80,0,0,0,17,9,29,30,29,38,19,0,0,17,9,9,38,9,9,9,9,39,19,17,39,12,13,39,9,47,39,12,13,39,9,9,9,39,47,38,39,12,13,39,9,24,39,9,47,19,0,0,17,86,86,9,19,14,3,17,87,64,65,63,64,65,63,64,65,63,64,65,63,45,88,89,89,89,64,65,63,90,90,91,91,92,92,92,92,93,94,94,95,95,96,95,97,98,95,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,9,9,9,47,9,25,26,101,101,27,28,9,5,7,7,7,7,7,54,6,9,9,12,102,102,103,104,104,104,104,104,104,104,104,105,105,105,105,105,105,106,107,45,45,45,45,45,45,74,78,108,109,78,108,110,109,78,108,109,78,78,74,74,74,
            74,74,111,112,111,111,112,111,111,112,111,111,112,111,113,78,78,114,111,112,111,111,112,111,111,112,111,111,112,111,115,115,14,3,17,4,18,5,7,54,6,10,11,4,18,15,2,2,2,16,80,81,80,81,116,81,80,81,80,81,80,116,0,0,0,17,39,9,39,9,39,9,86,87,90,90,90,90,64,117,117,117,117,117,66,65,63,64,65,65,65,63,64,65,65,63,64,63,89,89,64,65,63,64,63,45,45,45,45,45,45,45,45,0,9,48,49,50,48,118,51,52,53,51,9,9,2,119,119,119,119,119,119,119,120,102,102,95,98,95,121,95,95,122,0,17,9,123,9,124,125,126,126,125,127,9,123,9,19,0,0,0,128,128,128,128,128,129,129,128,128,128,128,128,128,99,99,128,128,128,128,128,128,128,128,128,128,128,129,129,0,0,130,131,132,133,134,133,135,136,137,133,134,133,138,139,140,130,141,142,143,142,143,142,144,102,102,144,142,143,142,145,142,141,0,0,146,147,147,147,147,147,147,103,104,104,104,104,104,104,104,104,104,104,104,105,148,105,106,107,45,45,45,45,45,45,
            74,74,149,150,151,151,150,151,151,150,151,151,150,151,152,78,78,78,151,150,151,151,150,151,151,150,151,151,150,151,79,79,0,17,9,153,9,32,33,154,154,33,37,9,153,9,19,0,0,17,9,123,9,124,125,126,126,125,127,9,123,9,19,0,0,17,9,123,24,123,9,86,102,155,156,156,156,156,45,45,45,0,9,9,157,158,9,157,159,158,9,157,158,9,0,45,160,160,160,160,160,160,161,162,163,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,165,165,165,166,102,102,167,167,167,167,141,141,141,141,141,167,168,167,169,169,102,102,169,169,169,169,169,169,169,170,131,132,171,172,173,134,174,174,134,173,175,134,140,170,131,169,142,176,142,142,142,143,142,145,142,141,141,102,102,141,141,130,131,171,172,171,172,177,178,179,179,180,171,172,181,182,183,169,184,145,102,145,184,143,184,184,145,184,143,102,145,184,169,169,185,167,167,167,144,167,167,167,167,144,167,167,167,185,141,0,0,20,6,12,102,102,102,102,186,119,45,119,45,45,45,
            74,74,187,187,187,187,187,187,187,187,187,187,187,187,188,74,122,98,95,121,95,121,95,121,95,121,94,94,189,189,189,189,189,189,95,95,190,191,191,192,192,191,191,191,191,191,190,190,190,190,95,95,94,94,97,102,102,94,193,94,95,94,98,189,169,169,167,142,142,143,167,184,184,194,163,165,165,163,195,195,195,195,163,163,196,160,160,162,197,163,198,163,198,163,195,195,195,195,195,165,165,165,166,184,184,167,145,167,145,145,167,167,167,167,167,176,167,176,167,143,167,143,167,176,167,143,167,143,143,167,143,142,176,142,143,102,102,143,142,143,142,176,142,169,169,169,169,169,169,169,169,102,102,199,200,200,200,200,200,200,200,200,200,201,201,201,202,142,142,142,142,167,167,145,142,167,167,102,145,102,102,102,145,102,145,102,143,167,102,184,167,203,203,203,203,203,204,205,205,205,205,205,205,205,142,169,169,169,169,169,169,102,169,169,169,169,169,169,169,169,102,169,169,169,131,132,134,134,173,171,172,175,140,170,131,132,173,134,140,130,0,0,20,6,12,102,102,102,102,186,119,45,119,45,45,45,
            122,122,206,206,206,206,206,206,206,206,206,206,206,206,98,189,189,189,189,189,189,189,189,189,189,189,102,102,189,189,189,189,189,189,189,189,189,207,102,94,122,207,207,207,207,207,98,98,98,98,95,208,206,206,121,102,102,102,208,102,209,102,98,189,170,131,132,174,174,139,173,175,138,174,174,139,138,174,139,134,134,138,174,210,102,211,211,174,174,174,212,174,213,174,139,134,134,134,134,212,212,212,212,175,213,213,213,214,215,215,140,170,131,132,134,216,134,216,134,215,215,140,132,134,216,134,140,170,131,132,145,102,143,102,176,102,102,143,102,176,102,143,102,169,169,185,145,167,167,143,167,184,184,217,165,165,165,165,165,165,165,165,165,165,165,165,166,184,184,184,184,167,145,167,184,167,167,184,145,184,184,184,145,184,145,184,143,142,102,142,185,169,169,169,169,169,218,141,185,167,167,167,167,167,184,203,203,203,203,203,167,184,205,205,205,205,205,205,141,205,218,169,169,169,169,185,167,143,143,143,167,176,176,167,145,145,145,145,167,167,13,9,9,24,12,102,102,102,102,186,45,45,45,45,45,45,
            0,16,3,17,219,220,221,222,220,221,222,223,219,219,219,219,219,219,219,224,225,219,219,219,219,224,226,226,225,19,14,3,189,189,227,227,227,227,192,192,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,206,206,206,209,206,95,206,98,189,131,132,228,228,229,228,229,230,231,232,229,228,229,228,140,130,130,132,233,234,235,160,160,236,237,228,238,228,237,228,228,228,228,228,239,228,228,239,228,228,237,228,238,240,241,241,170,181,182,183,242,243,233,228,240,241,241,244,245,245,245,245,182,182,183,131,145,184,145,184,143,184,184,143,184,143,184,143,184,167,246,247,248,249,21,20,250,246,251,252,251,219,19,15,2,2,16,15,16,3,17,19,17,250,246,19,15,16,15,16,15,2,2,16,15,2,16,3,17,87,90,90,90,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,64,65,63,64,65,65,65,63,64,65,63,64,63,64,63,64,65,65,63,89,89,89,253,254,45,45,45,45,45,45,
            //custom rooms for underground dark rooms
            0,0,255,255,255,255,255,256,256,255,255,255,255,255,0,0,
        ],

        rooms_as_collision_columns : [
            //overworld
            38,38,38,38,38,38,38,33,36,36,36,36,36,36,36,36,36,31,27,34,34,34,34,33,34,9,9,9,9,9,31,36,36,36,36,33,36,36,36,36,36,36,28,27,30,34,34,34,34,9,9,28,31,36,36,36,36,36,33,38,38,38,38,38,38,37,34,34,34,34,37,37,34,30,27,9,9,9,9,28,28,28,28,15,22,22,15,9,9,15,22,22,15,9,28,36,36,36,36,31,28,28,28,9,9,28,36,36,36,36,36,36,36,36,36,36,33,36,36,31,31,36,36,36,36,36,36,36,36,36,36,31,28,28,28,9,9,28,36,36,36,36,36,36,36,28,28,28,12,14,17,9,12,9,12,9,12,28,31,38,38,28,9,22,22,22,25,22,22,22,22,22,9,8,28,38,38,31,28,14,9,14,19,18,19,14,9,14,9,9,28,38,38,38,38,38,38,33,36,28,9,9,9,9,31,31,28,9,9,9,28,31,31,28,9,9,9,9,27,30,34,33,37,38,38,38,38,38,38,33,38,38,38,38,38,38,38,38,38,38,38,38,9,9,19,19,9,19,18,19,9,19,19,9,38,38,
            38,31,28,9,17,9,14,1,12,9,9,19,20,10,9,19,19,9,10,20,19,9,9,1,12,9,14,9,17,9,28,38,38,37,34,1,34,34,30,27,9,19,20,10,19,20,10,19,19,9,9,27,30,34,34,34,34,34,1,34,34,30,27,9,9,9,9,14,9,9,14,9,9,14,8,9,9,14,27,34,34,37,37,33,34,37,37,34,9,9,28,28,9,8,28,28,28,28,9,9,28,28,9,9,34,34,34,36,36,31,28,9,9,9,27,34,1,34,38,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,34,34,34,34,34,34,1,34,36,36,36,28,14,9,17,9,0,14,9,14,9,12,28,36,36,36,28,9,8,9,1,9,14,9,14,9,14,9,14,9,9,9,9,8,12,28,38,37,33,33,36,32,32,32,4,32,32,32,32,32,32,32,4,32,36,36,27,9,9,9,9,9,9,9,9,19,19,10,20,19,19,10,10,19,20,10,9,38,38,
            38,38,26,16,8,8,16,8,8,16,8,8,16,8,9,9,9,9,8,16,8,8,16,8,8,16,8,8,16,8,38,38,38,38,9,14,14,14,19,18,19,19,14,14,14,9,38,38,38,28,9,12,14,12,8,28,38,38,28,9,9,8,9,9,9,9,14,28,28,14,9,9,14,9,1,14,9,9,14,9,9,9,14,1,8,14,9,9,14,9,9,14,9,1,28,38,38,28,8,8,9,28,31,31,28,11,32,32,32,32,32,32,32,32,32,32,32,32,38,4,4,4,4,32,32,32,11,11,11,11,11,11,11,11,11,8,8,9,9,17,9,14,28,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,1,9,15,22,22,22,22,15,9,34,34,34,34,34,34,1,34,9,9,9,0,0,34,34,34,34,34,34,34,34,34,33,33,33,33,33,33,33,38,38,38,38,38,38,38,38,9,19,19,9,19,18,19,9,19,19,9,9,38,38,38,
            38,38,0,5,0,0,5,0,0,5,0,0,5,0,9,9,9,9,0,5,0,0,5,0,0,5,0,0,5,0,31,31,31,31,28,27,30,34,34,1,34,9,9,27,30,36,36,36,36,36,9,14,9,14,1,14,9,14,9,14,9,1,38,38,38,28,14,9,14,9,14,9,8,11,11,11,11,11,32,38,38,38,38,38,4,32,32,32,32,32,32,32,32,32,32,32,32,32,4,4,32,32,32,32,32,38,38,38,38,38,38,38,38,38,9,19,20,10,19,19,19,10,20,19,9,9,36,36,36,36,36,36,36,36,36,0,0,9,28,9,14,9,9,38,38,28,9,14,9,22,22,21,21,22,22,9,14,9,28,38,38,38,1,1,1,1,1,0,0,1,1,1,1,1,1,9,9,1,1,1,1,1,1,1,1,1,1,1,0,0,38,38,38,31,28,14,9,14,19,18,19,14,9,14,9,9,28,38,38,8,17,8,17,8,13,0,0,13,8,17,8,14,8,38,38,38,2,1,1,1,1,1,1,34,34,34,34,34,34,34,34,34,34,34,34,33,29,33,33,38,38,38,38,38,38,38,
            38,38,2,6,1,1,6,1,1,6,1,1,6,1,8,9,9,9,1,6,1,1,6,1,1,6,1,1,6,1,38,38,38,28,9,14,9,22,22,21,21,22,22,9,14,9,28,38,38,28,9,14,9,22,22,21,21,22,22,9,14,9,28,38,38,28,9,14,9,14,9,8,0,38,38,38,38,38,38,38,38,38,9,9,19,19,9,19,18,19,9,19,19,9,38,38,38,38,38,38,38,38,38,33,33,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,34,34,34,34,0,0,9,9,9,9,38,38,38,38,38,9,12,9,31,31,0,0,31,31,31,31,31,31,31,31,31,28,9,9,14,9,1,1,9,14,9,9,28,31,31,31,8,12,8,8,8,17,8,14,8,38,38,0,0,38,38,38,31,9,9,9,9,34,1,34,34,34,9,9,36,36,36,31,1,14,0,14,1,17,1,1,14,1,17,0,14,1,31,31,28,9,9,9,13,9,9,9,9,13,9,9,9,28,38,38,38,37,34,9,0,0,0,0,38,36,38,36,38,38,38,
            38,38,33,33,33,33,33,33,33,33,33,33,33,33,1,38,38,28,9,14,9,14,9,14,9,14,8,8,31,31,31,31,31,31,9,9,24,23,23,7,7,23,23,23,23,23,24,24,24,24,9,9,8,8,14,0,0,8,12,8,9,8,28,31,31,31,9,8,8,17,9,1,1,33,33,34,34,33,36,36,36,36,33,33,33,38,38,33,29,33,34,33,34,33,36,36,36,36,36,34,34,34,34,1,1,9,14,9,14,14,9,9,9,9,9,12,9,12,9,17,9,17,9,12,9,17,9,17,17,9,17,8,12,8,17,0,0,17,8,17,8,12,8,31,31,31,31,31,31,31,31,0,0,32,32,32,32,32,32,32,32,32,32,11,11,11,11,8,8,8,8,9,9,14,8,9,9,0,14,0,0,0,14,0,14,0,17,9,0,1,9,24,24,24,24,24,23,25,25,25,25,25,25,25,8,31,31,31,31,31,31,0,31,31,31,31,31,31,31,31,0,31,31,31,31,28,9,9,14,9,9,9,28,31,31,28,14,9,28,38,38,38,37,34,9,0,0,0,0,38,36,38,36,38,38,38,
            38,38,1,1,1,1,1,1,1,1,1,1,1,1,28,31,31,31,31,31,31,31,31,31,31,31,0,0,31,31,31,31,31,31,31,31,31,3,0,8,38,3,3,3,3,3,28,28,28,28,9,17,1,1,14,0,0,0,17,0,12,0,28,31,31,31,28,1,1,9,14,9,9,1,1,9,9,1,9,9,9,9,1,1,0,36,36,1,1,1,17,1,14,1,9,9,9,9,9,17,17,17,17,9,14,14,14,9,8,8,28,31,31,28,9,17,9,17,9,8,8,28,28,9,17,9,28,31,31,28,14,0,17,0,12,0,0,17,0,12,0,17,0,31,31,28,14,9,9,17,9,1,1,34,34,34,34,34,34,34,34,34,34,34,34,34,34,1,1,1,1,9,14,9,1,9,9,1,14,1,1,1,14,1,14,1,17,8,0,8,28,31,31,31,31,31,3,38,28,9,9,9,9,9,1,24,24,24,24,24,9,1,25,25,25,25,25,25,38,25,3,31,31,31,31,28,9,17,17,17,9,12,12,9,14,14,14,14,9,9,9,9,9,9,9,0,0,0,0,38,38,38,38,38,38,38,
            38,36,31,28,9,19,20,10,19,20,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,1,9,28,31,31,31,31,34,34,34,34,7,7,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,1,1,1,12,1,9,1,28,31,31,28,9,9,14,9,14,19,19,19,14,9,14,9,28,38,38,28,9,12,1,38,38,9,17,9,14,9,17,9,9,9,9,9,12,9,9,12,9,9,17,9,14,9,1,1,31,36,36,36,30,27,9,9,9,1,1,34,34,34,34,34,36,36,36,31,14,1,14,1,17,1,1,17,1,17,1,17,1,9,9,27,30,34,37,37,9,9,12,14,12,9,28,36,36,36,36,36,36,31,28,28,28,9,9,28,36,36,36,36,36,36,36,36,36,36,36,31,28,11,11,11,11,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,4,4,4,4,38,38,38,38,38,38,38,
            //custom rooms for underworld dark rooms
            38,38,9,9,9,9,9,8,8,9,9,9,9,9,38,38,
        ],
        
        rooms_as_enemies :  [

            [], [3,3,3,3], [4,4,4,4], [16,16,16], [4,4,4,4,4,4], [3,3,4,4,8,9], [3,3,4,4,7,7], [3], [16,16,16], [], [4,14], [8], [0,0,0,0,0,0], [0,0,0,0,0,0], [], [],

            [4,4,4,4], [3,3,4,4,7,7], [4,4,4,4,4,4], [3,3,4,4], [3,3,3,3] [3,3,4,4,7,7], [16,16,16], [16,16,16], [16,16,16,14,14], [16,16,16,14], [0,0,0,0,0,0,14], [], [], [7,7,7,7,7,7], [0,0,0,0,0,0,14], [7,7,7,7,7,7],
            
            [5], [5], [3], [3,3,3,3], [], [], [7,7,7,7,7,7,14], [7,7,7,7,7,7,14], [7,7,7,7,7,7,14], [8,8,8,8], [9,9,9,9,9,9], [8,8,8,8,9,9], [0,0,0,0], [12,12,12,13,13,14], [13,13,13,13,14], [],

            [5], [5], [7,7,3,3,4,4], [], [9,9], [14], [14], [], [12,12,12,12,12,13,14], [], [8,8,8,8,9,9], [9,9,9,9], [], [11,11,11,11], [12,12,12,13,13,14], [13,14],

            [5], [5], [10], [], [12,12,12,12,14], [], [14], [14], [8,8,8,8], [12,12,12,12,12,13], [13,13,13,13,13,13], [10,10,10,10,10,10], [12,12,12,13,13], [10,10,10,10], [10,10,10,10], [12,12,12,13,13,14],

            [3,3,3,3,3], [11,11,11,11,11], [10,10,11,11], [10,10,11,11,11], [12,12,12,12,14], [12,14], [12,12,12,12,14], [12,12,12,12], [12,12,12,12], [8,8,8,8,14], [12,12,12,12,14], [10,10,11,11], [11,11,11,11], [11,11,11,11], [11,11,11,11,11], [12,12,12,13,13,14],

            [3,3,4,4,7,7], [11,11,11,11,11], [11,11,11,11,11], [10,10,10,13,13,11], [12,12,12,13,13], [12,12,12,12,13], [12,12,12,12], [12,12,12,12], [12,12,12,12], [12,12,12,12,14], [12,12,12,12,14], [10,10,10,13,13,11], [11,11,11,11], [11,11,11,11], [10,10,10,13,13,11], [12,12,12,12,13,14],

            [7,7,7,7], [11,11,11,11,11], [11,11,11,10], [11,11,11,11], [0], [7,7,7,9,9,8,14], [0,0,0,0], [], [0,0,0,0], [1,1,1,1,1], [1,1,1,1,1,1], [9,9,9,9,9,9,14], [9,9,9,9,9,9,14], [13,13,13,13,14], [12,12,12,12,14], [13,13,13,13,14],

        ],

        rooms_as_secrets : [
            
            [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
            
            [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
            
            [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
            
            [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
            
            [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
            
            [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
            
            [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
            
            
            [], [], [], [], [], [], [], [ [0, 4, 1, 0, 0] ], [], [], [], [], [], [], [], [],
        ],
        // UNDERWORLD ROOM DATA
        underworld_map_data : {
            "border_info_as_tile_indexes" : [ //currently using overworld tile indexs, change to underworld tiles
                [
                    [61,61,61,61,61,61,61,61,61,61,61,],
                    [61,61,61,61,61,61,61,61,61,61,61,],
                    [61,61,61,61], [61,61,61,61], [61,61,61,61], 
                    [61,61,61,61], [61,61,61,61], [61,61,61,61], 
                    [61,61,61,61], [61,61,61,61], [61,61,61,61], 
                    [61,61,61,61], [61,61,61,61], [61,61,61,61],
                    [61,61,61,61,61,61,61,61,61,61,61,],
                    [61,61,61,61,61,61,61,61,61,61,61,],
                ],
            ],
            "underworld_column_data" : [
                [24,24,24,24,24,24,24,], // blank (black) tiles (from overworld)
            ],
            "underworld_collision_column_data" : [
                [0,0,0,0,0,0,0,], // blank (black) tiles (from overworld)
            ],
            "doorways_as_tiles": [
                [
                    /* doorway_info[0] : east */  [ /* 0:solid wall*/[61,61,61,61,1,], /*1:open door*/[24,24,24,24,0,], /*2:locked door w/ keyhole*/[,,,,,], /*3:closed door*/[,,,,,], /*4:enterable broken wall*/[,,,,,],],
                    /* doorway_info[1] : north */ [ /* 0:solid wall*/[61,61,61,61,1,], /*1:open door*/[24,24,24,24,0,], /*2:locked door w/ keyhole*/[,,,,,], /*3:closed door*/[,,,,,], /*4:enterable broken wall*/[,,,,,],],
                    /* doorway_info[2] : west */  [ /* 0:solid wall*/[61,61,61,61,1,], /*1:open door*/[24,24,24,24,0,], /*2:locked door w/ keyhole*/[,,,,,], /*3:closed door*/[,,,,,], /*4:enterable broken wall*/[,,,,,],],
                    /* doorway_info[3] : south */ [ /* 0:solid wall*/[61,61,61,61,1,], /*1:open door*/[24,24,24,24,0,], /*2:locked door w/ keyhole*/[,,,,,], /*3:closed door*/[,,,,,], /*4:enterable broken wall*/[,,,,,],], 
                ],
            ],

            //DATA PERTAINING TO SPECIFIC ROOMS
            "underworld_rooms_as_doorway_info" : [
                [0,0,0,1,], // #underworld_room00
            ],
            "underworld_rooms_as_columns" : [
                [0,0,0,0,0,0,0,0,0,0,0,0,], // #underworld_room00
            ],
            "underworld_rooms_as_collision_columns" : [
                [0,0,0,0,0,0,0,0,0,0,0,0,], // #underworld_room00
            ],
            "underworld_rooms_as_color_schemes" : [
                [0,], // #underworld_room00
            ],
            "underworld_rooms_as_borders" : [
                [0,], // #underworld_room00
            ],
            "underworld_rooms_as_exit_data" : [
                [[0],[0],[0],[2],],  // #underworld_room00
            ],
            "underworld_rooms_as_secrets" : [
                [], // #underworld_room00
            ]
        },

        lastTime : Date.now(),
        now : Date.now(),
        dt : 0,
        sprite_sheet_src : {
            link : 'images/link_sprite_sheet.png',
            items : '',
            enemies : 'images/sprites-enemies.png',
            overworld_tiles : 'images/overworldtiles.png',
            underworld_tiles : '',
        },
        sprite_sheets : {
            link : new Image(),
            items : new Image(),
            enemies : new Image(),
            overworld_tiles : new Image(),
            underworld_tiles : new Image(),
        },
        room : {
            enemy_pool : [],
            enemy_pool_index : 0,
            enemy_spawn_index : 0,
            coordinates : { x : 7, y : 7},
            sprite_map : [],
            collision_map : [],
            enemies : [],
            secrets : [],
            exit_info : [],
            screen : [],
            items : [],
            new_viewport : true,
        }
    };
    init_canvas();
    load_sprite_sheets();
    init_input_listener();
};
// for populating the enemy entities
function Enemy (name, index, { damage, health, movement_frequency, spawn_frequency, movement_pattern, animation_info}){ 
    this.name = name;
    this.index = index;
    this.damage = damage;
    this.health = health;
    this.movement_frequency = movement_frequency;
    this.spawn_frequency = 1;//spawn_frequency;
    this.movement_pattern =  [
        {x:1,y:null},
        {x:null,y:0},
        {x:null,y:1},
        {x:0,y:null},
        {x:null,y:null},
    ];  //movement_pattern;
    this.collisions = {
        enemy_out_of_bounds : false,
        enemy_with_map : false,
    }
    this.animation_info = {
        position: 
        {
            x : null,
            y : null,
        },
        potential_position: {
            x : null,
            y : null,
        },
        walking_speed : animation_info.walking_speed ,
        walking_index : 0,
        direction : {
            x: 0,
            y: 0,
        },
        dimensions : {
            w : 16,
            h : 16,
        },
        number_of_sprites : animation_info.number_of_sprites,
        is_attacking : false,
        is_moving : true,
        is_flying : false,
        //can_despawn : can_despawn,
        //spawn pattern
        // 0 randomly on land
        // 1 randomly on sea
        // 2 randomly from edge
        // 3 at specific position relative to player
        spawn_pattern : 0,//animation_info.spawn_pattern,
        sprite_index : animation_info.sprite_index,
    };
    return this;
}
// The main game loop ////////////////////////////////////////
function main() {
    render_info.now = Date.now();
    render_info.dt = (render_info.now - render_info.lastTime) / 1000.0;

    update(render_info.dt);
    render();

    render_info.lastTime = render_info.now;
    requestAnimationFrame(main);
};
// update ///////////////////////////////////////////////////////////
function update(dt){
        
    function handle_passage_of_time(){
        function check_for_dead_foes(){
            let new_enemy_arr = render_info.room.enemies;
            for ( let i in render_info.room.enemies ){
                if ( render_info.room.enemies[i].health <= 0 ){
                    new_enemy_arr = new_enemy_arr.filter((x,n)=>n!=i);
                }
            }
            render_info.room.enemies = new_enemy_arr;
        };
        function update_link(){
            check_for_dead_link();
            if (link.invulnerabile){
                (link.invulnerability_timer == 0 ) ? link.invulnerabile = false : link.invulnerability_timer--;
            }
        };
        check_for_dead_foes();
        check_for_expired_weapons();
        check_for_expired_loot();
        check_for_expired_items();
        progress_animation_paths();
        progress_logic_paths();
        // update_screen();
        //  check for viewport change
        //  check for visual effects active
        //  check for pre-existing room info (tiles, collision, items, enemies)
        //  
        // update_enemies();
        //   check for dead enemies
        //   despawn dead enemies
        //   check for despawning / respawning
        //   despawn / respawn phasing enemies after check for phasing duration
        //   check the room enemie pool for unspawned enemies
        //   check out spawned enemies
        //   spawn some new enemies 
        //   determine / progress enemy movement patterns
        //   determine / progress enemy attack patterns
        // update_link();
        //   check is_attacking
        //   check for change in position
        //   check for invulnerability
        //   check for death
        //   check for animation progress
        //   check for incoming damage
        update_link();
        // update_items();
    };
    function handle_input(){
        if (input.isDown('SPACE') && !link.animation_info.is_attacking){
            if (link.weapon !== null){
                link.animation_info.is_attacking = true;
            }
        }

        if(input.isDown('DOWN') || input.isDown('s')) {
            link.animation_info.potential_position.y = link.animation_info.position.y + link.animation_info.walking_speed * render_info.dt;
            link.animation_info.walking_index++;
            link.animation_info.direction.y = 0;
            link.animation_info.direction.x = null;
        }

        if(input.isDown('UP') || input.isDown('w')) {
            link.animation_info.potential_position.y = link.animation_info.position.y - link.animation_info.walking_speed * render_info.dt;
            link.animation_info.walking_index++;
            link.animation_info.direction.y = 1;
            link.animation_info.direction.x = null;
        }

        if(input.isDown('LEFT') || input.isDown('a')) {
            link.animation_info.potential_position.x = link.animation_info.position.x - link.animation_info.walking_speed * render_info.dt;
            link.animation_info.walking_index++;
            link.animation_info.direction.x = 0;
            link.animation_info.direction.y = null;
        }

        if(input.isDown('RIGHT') || input.isDown('d')) {
            link.animation_info.potential_position.x = link.animation_info.position.x + link.animation_info.walking_speed * render_info.dt;
            link.animation_info.walking_index++;
            link.animation_info.direction.x = 1;
            link.animation_info.direction.y = null;
        }
    }
    function collision_logic(){
        function determine_collisions(){
            collisions = {
                link_with_map : false,
                link_with_enemy : false,
                link_with_item : false,
                link_with_doorway : false,
                out_of_bounds : false,
                weapon_with_enemy : false,
                enemy_out_of_bounds : false,
                enemy_with_map : false,
                link_with_cave : false,
            }   
            // change to use links direction to check for collision with box ahead
            if ( Math.round(link.animation_info.potential_position.x) > 15 || Math.round(link.animation_info.potential_position.x) < 0 || Math.round(link.animation_info.potential_position.y) > 10 || Math.round(link.animation_info.potential_position.y) < 0 ){
                collisions.out_of_bounds = true;
            }
            else if (render_info.room.collision_map[Math.round(link.animation_info.potential_position.x)][Math.round(link.animation_info.potential_position.y)] == 1) {
                collisions.link_with_map = true;
            }
            //collision with sword strike
            if (link.weapon !== null && link.animation_info.is_attacking){
                let weapon = link.weapon;
                for ( let ii in render_info.room.enemies ){
                    let enemy = render_info.room.enemies[ii];
                    let condition = false;
                    if (enemy.animation_info.position.x != null){
                        condition = collides( 
                            weapon.position.x*16, 
                            weapon.position.y*16, 
                            weapon.position.x*16 + weapon.hitbox_dimensions.w, 
                            weapon.position.y*16 + weapon.hitbox_dimensions.h,
                            enemy.animation_info.position.x*16,
                            enemy.animation_info.position.y*16,
                            enemy.animation_info.position.x*16 + enemy.animation_info.dimensions.w,
                            enemy.animation_info.position.y*16 + enemy.animation_info.dimensions.h,
                        );
                    }
                    if ( condition ){
                        if (collisions.weapon_with_enemy == false){
                            collisions.weapon_with_enemy = [];
                        }
                        weapon.collided = true;
                        collisions.weapon_with_enemy.push( { 'weapon' : weapon, 'enemy' : enemy } );
                    }
                }
            }
            for ( let i in render_info.room.enemies){
                let enemy = render_info.room.enemies[i];
                let condition = collides( 
                    link.animation_info.position.x*16 +2,
                    link.animation_info.position.y*16 +2,
                    link.animation_info.position.x*16 + link.animation_info.hitbox_dimensions.w -2, 
                    link.animation_info.position.y*16 + link.animation_info.hitbox_dimensions.h -2,
                    enemy.animation_info.position.x*16,
                    enemy.animation_info.position.y*16,
                    enemy.animation_info.position.x*16 + enemy.animation_info.dimensions.w,
                    enemy.animation_info.position.y*16 + enemy.animation_info.dimensions.h,
                );
                if (condition){
                    collisions.link_with_enemy = true;
                    break;
                }
            }
            for ( let i in render_info.room.enemies){
                if ( render_info.room.enemies[i].animation_info.potential_position.x != null ){
                    if ( Math.round(render_info.room.enemies[i].animation_info.potential_position.x) > 15 || Math.round(render_info.room.enemies[i].animation_info.potential_position.x) < 0 || Math.round(render_info.room.enemies[i].animation_info.potential_position.y) > 10 || Math.round(render_info.room.enemies[i].animation_info.potential_position.y) < 0 ){
                        collisions.enemy_out_of_bounds = true;
                        render_info.room.enemies[i].collisions.enemy_out_of_bounds = true;
                    }
                    else if (render_info.room.collision_map[Math.round(render_info.room.enemies[i].animation_info.potential_position.x)][Math.round(render_info.room.enemies[i].animation_info.potential_position.y)] == 1) {
                        collisions.enemy_with_map = true;
                        render_info.room.enemies[i].collisions.enemy_with_map = true;
                    }
                }
            }
            for ( let i in render_info.room.secrets ){
                let secret = render_info.room.secrets[i];
                if (secret[0] == 0){
                    if (Math.round(link.animation_info.position.x) == secret[1] && Math.round(link.animation_info.position.y) == secret[2]){
                        render_info.overworld = false;
                        render_info.underworld_viewport = { x : secret[3], y : secret[4]};
                        collisions.link_with_cave = true;
                        link.animation_info.potential_position = { x : 7, y : 10 };
                        link.animation_info.temp_overworld_position = { x : link.animation_info.position.x, y : link.animation_info.position.y };
    
                    }
                }
            }
        }
        function resolve_collisions(){
            function deny_potential_position ( enetity ) {
                enetity.animation_info.potential_position.x = enetity.animation_info.position.x;
                enetity.animation_info.potential_position.y = enetity.animation_info.position.y;
            }
            function approve_potential_position ( entity ) {
                entity.animation_info.position.x = entity.animation_info.potential_position.x;
                entity.animation_info.position.y = entity.animation_info.potential_position.y;
            }
            function reset_room () {
                render_info.room.enemy_spawn_index=0;
                render_info.room.enemies=[];
                render_info.room.enemiy_pool=[];
                render_info.room.new_viewport = true;
                //there are more attributes that require reseting
            }
            function move_to_a_new_viewport ( swap_value, should_swap_x, wall_index, should_decriment_viewport){
                if ( should_swap_x ){
                    link.animation_info.potential_position.x = swap_value;  link.animation_info.position.x = swap_value;
                } else {
                    link.animation_info.potential_position.y = swap_value;  link.animation_info.position.y = swap_value;
                }
                if (render_info.overworld){
                    if ( should_swap_x ) {
                        render_info.viewport.x += (should_decriment_viewport) ? -1 : 1;
                    } else {
                        render_info.viewport.y += (should_decriment_viewport) ? -1 : 1;
                    }
                } else {
                    switch (render_info.room.exit_info[wall_index][0]){
                        case 0 :{link.potential_position = { x : 7, y : 5 }; break;} // resets position to middle of room if the character has walked through walls somehow
                        case 1 :{render_info.underworld_viewport = { x : render_info.room.exit_info[wall_index][1], y : render_info.room.exit_info[wall_index][1]}; break;}
                        case 2 :{render_info.overworld = true; 
                            link.animation_info.position = { x : link.animation_info.temp_overworld_position.x, y : link.animation_info.temp_overworld_position.y+0.2};
                            link.animation_info.potential_position = { x : link.animation_info.temp_overworld_position.x, y : link.animation_info.temp_overworld_position.y+0.2};
                            break;}
                    }
                }
            }
            function apply_damage_to_enemy ( enemy, damage ){
                enemy.health -= damage;
                //add logic for checking invulnerability
                //add logic for applying damaged sate to trigger animation
            }
            function apply_damage_to_link ( damage ){
                if (!link.invulnerabile){
                    link.health -= damage;
                    link.invulnerabile = true;
                    link.invulnerability_timer = 60;
                }
            }
            function get_index_for_the_direction_link_went_out_of_bounds ( ) {
                let index = 0; //default
                if (Math.round(link.animation_info.potential_position.x) < 0 ){
                    index = 0; // west
                } else if (Math.round(link.animation_info.potential_position.x) > 15){
                    index = 2 // east
                } else if (Math.round(link.animation_info.potential_position.y) < 0){
                    index = 1; // north
                } else if (Math.round(link.animation_info.potential_position.y) > 10 ){
                    index = 3; // south
                }
                return index
            }
            function despawn_and_reset_enemies ( enemies ) {
                let enemy;
                for ( i in enemies ){
                    enemy = enemies[i];
                    enemy.animation_info.potential_position.x = null;
                    enemy.animation_info.position.x = null; 
                    enemy.animation_info.potential_position.y = null;
                    enemy.animation_info.position.y = null;    
                    enemy.collisions.enemy_out_of_bounds = false;
                    render_info.room.enemy_pool.push( enemy );
                }
                render_info.room.enemies = render_info.room.enemies.filter( (el,n) => {return el.animation_info.position.x!=null ;}); 
            }
            if ( !collisions.link_with_map ){
                approve_potential_position( link );
                if (!link.animation_info.is_attacking){
                    link.weapon.position = { x:link.animation_info.position.x,y:link.animation_info.position.y };
                }
            } else {
                deny_potential_position( link );
            }
            if(collisions.out_of_bounds){
                switch ( get_index_for_the_direction_link_went_out_of_bounds() ){
                    case 0: { move_to_a_new_viewport( 15, true,  0,  true); break;}
                    case 1: { move_to_a_new_viewport( 10, false, 1,  true); break;}
                    case 2: { move_to_a_new_viewport(  0, true,  2, false); break;}
                    case 3: { move_to_a_new_viewport(  0, false, 3, false); break;}
                }
                reset_room();
            } 
            if ( collisions.weapon_with_enemy ){
                let enemy, damage_source;
                for (let i in collisions.weapon_with_enemy){
                    enemy = collisions.weapon_with_enemy[i]['enemy'];
                    damage_source = collisions.weapon_with_enemy[i]['weapon'];
                    apply_damage_to_enemy( enemy, damage_source.damage );
                }
            }
            if ( collisions.link_with_enemy ){
                apply_damage_to_link(1);
            }
            if ( collisions.enemy_out_of_bounds ){
                despawn_and_reset_enemies( render_info.room.enemies.filter( ( en,n ) => { return en.collisions.enemy_out_of_bounds; } ) );    
            }
            if ( collisions.enemy_with_map ){
                let enemy;
                for ( let i in render_info.room.enemies ){
                    enemy = render_info.room.enemies[i];
                    enemy.collisions.enemy_with_map = false;
                    deny_potential_position ( enemy );   
                }
            }
            render_info.room.enemies.filter(( enemy,n ) => { 
                return !( 
                    enemy.collisions.enemy_with_map || 
                    enemy.collisions.enemy_out_of_bounds || 
                    enemy.animation_info.potential_position.x == null 
                ) 
            }).forEach( (enemy) => {
                enemy.collisions.enemy_with_map = false;
                approve_potential_position ( enemy );
            }) 
        }
        function collides(x, y, r, b, x2, y2, r2, b2) {
            return !(r <= x2 || x > r2 ||
                        b <= y2 || y > b2);
        }    
        determine_collisions();
        resolve_collisions();
    }
    function update_enemies ( dt ) {
        function fetch_entry_points(){
            let entry_points = [];
            for (let x in render_info.room.collision_map){
                for (let y in render_info.room.collision_map[x]){
                    if (x == 0 || x == 15 || y == 0 || y == 10 ){
                        if (render_info.room.collision_map[x][y] == 0){
                            entry_points.push({'x':x-0,'y':y-0});
                        }
                    }
                }
            }
            return entry_points;
        }
        function initialize_room_enemies(){
            render_info.room.enemy_pool = [];
            let temp = render_info.rooms_as_enemies[render_info.viewport.x-1 + render_info.viewport.y*16 ];
            for (let i in temp ){
                render_info.room.enemy_pool.push(
                    //new Enemy(
                    // Object.assign(
                    //     {},
                    //     entities.enemies[
                    //         render_info.index_to_enemy_name_mapping[
                    //             temp[i]
                    //         ]
                    //     ]
                    // )
                    new Enemy(
                        render_info.index_to_enemy_name_mapping[
                            temp[i]
                        ],
                        i,
                        {
                            ...entities.enemies[
                                render_info.index_to_enemy_name_mapping[
                                    temp[i]
                                ]
                            ]
                        }
                    )
                );
            } 
    
        }
        let room = render_info.room;
        if ( room.enemy_spawn_index == 0 && room.enemy_pool.length == 0 )
            initialize_room_enemies();
        if ( room.enemy_pool.length != 0){
            for (let i in room.enemy_pool){
                if ( render_info.now % room.enemy_pool[i].spawn_frequency < 10){
                    room.enemies.push(room.enemy_pool[i]);
                    room.enemy_pool = room.enemy_pool.filter( (el,n) => n!=i ); 
                    break;
                }
            }
        }
        //for each enemy in the room
        for ( let i in room.enemies ) {
            //if the enemy has been spawned
            if ( room.enemies[i].animation_info.position.x != null ) {
                if ( room.enemies[i].animation_info.is_moving ) {
                    //if the enemies in the room are moving, 
                    //update their position and progress their point in their movement pattern
                    
                    if (room.enemies[i].animation_info.direction.y == 0) { 
                        room.enemies[i].animation_info.potential_position.y = room.enemies[i].animation_info.position.y + room.enemies[i].animation_info.walking_speed * render_info.dt;
                    } else 
                    if (room.enemies[i].animation_info.direction.y == 1) { 
                        room.enemies[i].animation_info.potential_position.y = room.enemies[i].animation_info.position.y - room.enemies[i].animation_info.walking_speed * render_info.dt;
                    } else 
                    if (room.enemies[i].animation_info.direction.x == 1) { 
                        room.enemies[i].animation_info.potential_position.x = room.enemies[i].animation_info.position.x + room.enemies[i].animation_info.walking_speed * render_info.dt;
                    } else 
                    if (room.enemies[i].animation_info.direction.x == 0) { 
                        room.enemies[i].animation_info.potential_position.x = room.enemies[i].animation_info.position.x - room.enemies[i].animation_info.walking_speed * render_info.dt;
                    }
                    room.enemies[i].animation_info.walking_index++;
                    if (room.enemies[i].animation_info.walking_index % room.enemies[i].movement_frequency == 0 ){
                        room.enemies[i].animation_info.is_moving = false;
                    }
                } else {
                    //if the enemies in the room arent moving, 
                    //randomly determine if they will start moving during this frame
                    if (room.enemies[i].movement_pattern != null){
                        room.enemies[i].animation_info.direction = room.enemies[i].movement_pattern[
                            Math.floor(
                                Math.random() * Math.floor(room.enemies[i].movement_pattern.length-1)
                            )
                        ];
                        room.enemies[i].animation_info.is_moving = true;

                    }
                }
                if ( !room.enemies[i].animation_info.is_attacking ) {
                    //if the enemies in the room are not attacking, 
                    //randomly determine if they will start attacking this frame
                } else {
                    //if the enemies in the room are attacking,
                    //update their attack's position and progress their point in their attack pattern
                }
            } else {
                //if the enemy hasn't been spawned yet
                let entries = fetch_entry_points().filter(
                    (el)=>{
                        return ( el.x!=Math.round(link.animation_info.position.x) && el.y!=Math.round(link.animation_info.position.y) )
                    }  
                );
                if (entries.length != 0){
                    room.enemies[i].animation_info.position = entries[
                        Math.floor(
                            Math.random() * Math.floor(
                                entries.length-1
                            )
                        )
                    ];
                    room.enemies[i].animation_info.potential_position.x = room.enemies[i].animation_info.position.x;
                    room.enemies[i].animation_info.potential_position.y = room.enemies[i].animation_info.position.y;
                    room.enemy_spawn_index++;
                    room.enemies[i].animation_info.direction = 
                        (room.enemies[i].animation_info.potential_position.x == 0 ) ? {x:1, y:null} :
                            (room.enemies[i].animation_info.potential_position.x == 10 ) ? {x:0, y:null} :
                                (room.enemies[i].animation_info.potential_position.y == 0 ) ? {x:null, y:0} : {x:null, y:1};  
                }
            }
            
        }
        //check current room
        //get enemy pool
        //check which enemies are spawned

        //if they are not moving
        //randomly determine if they will move using their movement frequency
        //if they will move, randomly select a movement pattern
        
        //if they are moving
        //progress movement pattern
        
        //determine if they will attack / shoot projectile

        //for the enemies that are not spawned
        //determine if they spawn immediately or if they spawn at intervals
        //determine where they spawn 
        //either spawn immediately or
        //use the room's spawning_index (index used much like link's walking_index) and dt to determine if it is an emey spawning interval, and spawn the enemy at the location


    }
    function fetch_overworld_details(){
        let screen = [];
        let collision_map = []; 
        let screen_x = render_info.viewport.x 
        let screen_y = render_info.viewport.y;
        let room_index = screen_x*16 + screen_y*256;        
        for ( let columns = 0; columns < 16; columns++ ){
            screen.push( 
                render_info.column_data[ 
                    render_info.rooms_as_columns[ 
                        room_index + columns
                    ]
                ] 
            );
        }
        render_info.room.screen = render_info.room.sprite_map /* replace sprite_map with screen thought codebase */ = screen;

        for ( let columns = 0; columns < 16; columns++ ){
            collision_map.push( 
                render_info.column_collision_data[ 
                    render_info.rooms_as_collision_columns[ 
                        room_index + columns
                    ]
                ] 
            )
        }
        render_info.room.collision_map = Array.from(collision_map);
        
        render_info.room.secrets = render_info.rooms_as_secrets[ screen_x + screen_y * 16 ]
        for (let i in render_info.room.secrets){
            if (render_info.room.secrets[i][0] == 0){
                render_info.room.collision_map[render_info.room.secrets[i][1]][render_info.room.secrets[i][2]] = 0;
            }
        }
    }
    function fetch_underworld_room_details(){
        let screen = [];
        let collision_map = [];
        let screen_x = render_info.underworld_viewport.x;
        let screen_y = render_info.underworld_viewport.y;
        let room_index = screen_x*16 + screen_y*16;//256;
        let border_index = render_info.underworld_map_data.underworld_rooms_as_borders[ room_index ];
        let border = render_info.underworld_map_data.border_info_as_tile_indexes[ 
            border_index
        ];
        screen.push([...border[0]]);
        screen.push([...border[1]]);
        for ( let columns = 0; columns < 12; columns++ ){
            screen.push([
                border[columns+2][0],
                border[columns+2][1],
                ...render_info.underworld_map_data.underworld_column_data[ 
                    render_info.underworld_map_data.underworld_rooms_as_columns[ room_index ][columns]
                ],
                border[columns+2][2],
                border[columns+2][3],
            ]);
        }
        screen.push([...border[14]]);
        screen.push([...border[15]]);

        render_info.room.sprite_map = screen;
        collision_map.push([1,1,1,1,1,1,1,1,1,1]);
        collision_map.push([1,1,1,1,1,1,1,1,1,1]);
        for ( let columns = 0; columns < 12; columns++ ){
            collision_map.push( 
                [1,1,...render_info.underworld_map_data.underworld_collision_column_data[ 
                    render_info.underworld_map_data.underworld_rooms_as_collision_columns[ room_index ][ columns ]
                ],1,1,]
            )
        }
        collision_map.push([1,1,1,1,1,1,1,1,1,1]);
        collision_map.push([1,1,1,1,1,1,1,1,1,1]);
        
        render_info.room.collision_map = Array.from(collision_map);
        
        render_info.room.secrets = render_info.underworld_map_data.underworld_rooms_as_secrets[ screen_x + screen_y * 16 ];
        
        render_info.room.exit_info = render_info.underworld_map_data.underworld_rooms_as_exit_data[ screen_x + screen_y * 16 ];

        function apply_doorway({x,y,i=0}){
            screen[x][y] = render_info.underworld_map_data.doorways_as_tiles[border_index][i][render_info.underworld_map_data.underworld_rooms_as_doorway_info[room_index][i]][0];
            screen[x][y+1] = render_info.underworld_map_data.doorways_as_tiles[border_index][i][render_info.underworld_map_data.underworld_rooms_as_doorway_info[room_index][i]][1];
            screen[x+1][y] = render_info.underworld_map_data.doorways_as_tiles[border_index][i][render_info.underworld_map_data.underworld_rooms_as_doorway_info[room_index][i]][2];
            screen[x+1][y+1] = render_info.underworld_map_data.doorways_as_tiles[border_index][i][render_info.underworld_map_data.underworld_rooms_as_doorway_info[room_index][i]][3];
            collision_map[x][y] = render_info.underworld_map_data.doorways_as_tiles[border_index][i][render_info.underworld_map_data.underworld_rooms_as_doorway_info[room_index][i]][4];
            collision_map[x][y+1] = render_info.underworld_map_data.doorways_as_tiles[border_index][i][render_info.underworld_map_data.underworld_rooms_as_doorway_info[room_index][i]][4];
            collision_map[x+1][y] = render_info.underworld_map_data.doorways_as_tiles[border_index][i][render_info.underworld_map_data.underworld_rooms_as_doorway_info[room_index][i]][4];
            collision_map[x+1][y+1] = render_info.underworld_map_data.doorways_as_tiles[border_index][i][render_info.underworld_map_data.underworld_rooms_as_doorway_info[room_index][i]][4]; 
        }
        [{ x: 0, y: 5, i: 0,},{ x: 14, y: 5, i: 1,},{ x: 7, y: 0, i: 2,},{ x: 7, y: 9, i: 3,},].forEach(apply_doorway);

        for (let i in render_info.room.secrets){
            if (render_info.room.secrets[i][0] == 0){
                render_info.room.collision_map[render_info.room.secrets[i][1]][render_info.room.secrets[i][2]] = 0;
            }
        }
        render_info.room.screen = render_info.room.sprite_map /* replace sprite_map throughout code with screen */ = screen;
    };
    function update_room_details(){
        if ( render_info.room.new_viewport ){
            if ( render_info.overworld ) {
                fetch_overworld_details()
            } else {
                fetch_underworld_room_details(); //<- replacement logic using custom underworld functions | temporary underworld implipentation using overworld logic -> get_screen_tiles(render_info.underworld_viewport.x, render_info.underworld_viewport.y + 8);
            }
            render_info.new_viewport = false;
        }
        
    };
    // unimplimented update methods ////////////////////
    function check_for_dead_link(){}
    function check_for_expired_weapons(){}
    function check_for_expired_loot(){}
    function check_for_expired_items(){}
    function progress_animation_paths(){}
    function progress_logic_paths(){}
    // execution //////////////////////////////////////
    update_room_details();
    handle_passage_of_time(dt);
    handle_input();
    update_enemies();
    collision_logic();

};
// render /////////////////////////////////////////////
function render(){
    
    function display_tile(tile_number, destination_x, destination_y){
        let x = tile_number % 20;
        let y = (tile_number - x) / 20; 
        render_info.ctx.drawImage(render_info.sprite_sheets.overworld_tiles, x*16+1, y*16+1, 14, 14, destination_x*16, destination_y*16, 16, 16);
    }
    function draw_enemies(){
        let sprite_height = 16; //pixels
        let sprite_width = 16; //pixels
        let border_offset = 1;
        let x_offset = 0;
        for ( let i in  render_info.room.enemies ){
            let enemy = render_info.room.enemies[i];
            let offsets = [0,0,0,0];
            switch (enemy.animation_info.number_of_sprites){
                case 2: {
                    offsets = [0,1,0,1];break;}
                case 4: {
                    offsets = [0,1,0,1];break;}
                case 5: {
                    offsets = [2,2,2,2];break;}
                case 8: {
                    offsets = [0,2,1,3];break;}
            }
            if ( enemy.health > 0 ){
                if (enemy.animation_info.direction.y == 0) {
                    x_offset = offsets[0];
                } else 
                if (enemy.animation_info.direction.y == 1) {
                    x_offset = offsets[1];
                } else 
                if (enemy.animation_info.direction.x == 0) {
                    x_offset = offsets[2];
                } else 
                if (enemy.animation_info.direction.x == 1) {
                    x_offset = offsets[3];
                } else {
                    //spawn enemy with null position onto screen
                }
                render_info.ctx.drawImage(
                    render_info.sprite_sheets.enemies, 
                    ( enemy.animation_info.sprite_index.x + x_offset ) * 30, 
                    ( enemy.animation_info.sprite_index.y + ( Math.floor( enemy.animation_info.walking_index / 10 ) % 2 ) )*30, 
                    16, 
                    16, 
                    enemy.animation_info.position.x*16 +16, 
                    enemy.animation_info.position.y*16 +16, 
                    16, 
                    16, 
                );
            }    
        }
    }
    function draw_items(){

    }
    function draw_link(){
        let sprite_height = 16; //pixels
        let sprite_width = 16; //pixels
        let border_offset = 1;
        let y_offset = 0;
        if (link.animation_info.direction.y == 0) {
            y_offset = 0;
        } else 
        if (link.animation_info.direction.y == 1) {
            y_offset = 2;
        } else 
        if (link.animation_info.direction.x == 0) {
            y_offset = 1;
        } else 
        if (link.animation_info.direction.x == 1) {
            y_offset = 3;
        }
        if (link.animation_info.is_attacking){
            link.animation_info.current_attack_frame ++;
            let sword_position = {x:null,y:null};
            sword_position.y = link.animation_info.position.y*16+sprite_height;
            sword_position.x = link.animation_info.position.x*16+sprite_width;
            let sword_extension = 0;
            if ( link.animation_info.current_attack_frame < link.animation_info.wind_up_attack_frames ){
                sword_extension = link.animation_info.current_attack_frame * 12 / link.animation_info.wind_up_attack_frames ;
            }
            else if ( link.animation_info.current_attack_frame >= link.animation_info.wind_up_attack_frames && link.animation_info.current_attack_frame <= link.animation_info.attack_animation_duration - link.animation_info.recovery_attack_frames ){
                sword_extension = 12;
            }
            else if ( link.animation_info.current_attack_frame >= link.animation_info.attack_animation_duration - link.animation_info.recovery_attack_frames && link.animation_info.current_attack_frame <= link.animation_info.attack_animation_duration ){
                sword_extension = ((link.animation_info.attack_animation_duration - link.animation_info.current_attack_frame) * (12 / link.animation_info.recovery_attack_frames) ) ;
            }
            else {
                link.animation_info.is_attacking = false;
                link.animation_info.current_attack_frame = 0;
                sword_extension = 0;
            }
            if (link.animation_info.direction.y == 0) {
                sword_position.y += sword_extension;
            } else 
            if (link.animation_info.direction.y == 1) {
                sword_position.y -= sword_extension;
            } else 
            if (link.animation_info.direction.x == 0) {
                sword_position.x -= sword_extension;
            } else 
            if (link.animation_info.direction.x == 1) {
                sword_position.x += sword_extension;
            }
            if(link.animation_info.is_attacking){
                //@wubwub
                link.weapon.position = {x:sword_position.x/16, y:sword_position.y/16};
                render_info.ctx.drawImage(render_info.sprite_sheets.link, 3*16, y_offset*16, 16, 16, sword_position.x + border_offset, sword_position.y + border_offset, 16, 16);
            }
            if (link.invulnerability_timer % 3 == 0){
                render_info.ctx.drawImage(render_info.sprite_sheets.link, 2*16, y_offset*16, 16, 16, link.animation_info.position.x*16+sprite_width + border_offset, link.animation_info.position.y*16+sprite_height + border_offset, 16, 16);
            }
        } else {
            if (link.invulnerability_timer % 3 == 0){
                render_info.ctx.drawImage(render_info.sprite_sheets.link, ( ( Math.floor( link.animation_info.walking_index / 10 ) % 2 ) )*16, y_offset*16, 16, 16, link.animation_info.position.x*16+sprite_width + border_offset, link.animation_info.position.y*16+sprite_height + border_offset, 16, 16);
            }
        }
    }   
    function draw_screen(){
        let screen = render_info.room.screen;
        let viewport_w = 16; //tiles
        let viewport_h = 11; //tiles
        let border_offset = 1;
        render_info.ctx.fillRect(0, 0, 18*16, 13*16);
        for ( x = 0; x < viewport_w; x++){
            for ( y = 0; y < viewport_h; y++){
                    display_tile( screen[ x ][ y ], x + border_offset, y + border_offset );
            }
        }
    }
    draw_screen();
    draw_items();
    draw_link();
    draw_enemies();
}
init();

